【コマンドライン系】

  ◆更新
    php artisan yyux:refresh --all
  ◆データベース更新
    データベースをリフレッシュし、全データベースシードを実行
    php artisan migrate:refresh --seed

  ◆ディレクトを変更した場合
    composer dump-autoload

  ◆seederクラス作成
    php artisan make:seeder クラス名
    (./database/seeds/を参照)
  ◆seeder実行
    php artisan db:seed
    個別実行の場合は
    php artisan db:seed --class=クラス名
  ◆./package.jsonに記載されているパッケージのインストール
    npm install
  ◆./gulpfile.jsに記載されているタスクの実行
    gulp
  ◆migrationファイル作成
    php artisan make:migration ファイル名(拡張子なし)
    (./database/migrations/を参照)
  ◆migration実行
    php artisan migrate
  ◆コマンドから実行するクラスの作成
    php artisan make:command クラス名
    作成したファイルの$signatureでコマンド名を指定
    php artisan コマンド名　で実行可能
    実行内容はhandle()に記載する

【composer】
  composer install：composer.lockに書かれている各ライブラリをインストールする。
  composer update：composer.jsonをもとに各ファイルを最新版にアップデートする。


【npm】
  node.jsのパッケージ管理ツール。
  package.jsonはcomposerにとってのcomposer.jsonみたいなやつ。

【gulp】
  Node.jsをベースとしたビルドシステムヘルパー。
  Node.jsのパッケージ（ライブラリ）のひとつ。
  なので、npmでインストールできる。

【Elixir】
  gulpをLaravelで使いやすくするためにラッピングしたツールがElixir。

【bootstrapの利用について】
  bootstrapは./package.jsonに書いてある通り、
  「4.0.0-alpha.6」のバージョンで利用中。
  npm installで./node_modules/bootstrapにインストール。
  cssは./resources/assets/sass/app.scss内に記載されている、
  @importにより、コンパイル対象となる。
  jsは./resources/assets/js/app.js内に記載されている、
  「require('./bootstrap');」によりコンパイル対象となる。

【bootstrap4の便利なクラス】
"bootstrap": "~4.0.0-beta",
  ◆display系
    .d-block .d-inline .d-inline-block
  ◆色系
    テキストカラー:
      .text-muted .text-primary .text-success
      .text-info .text-warning .text-danger .text-white
    バックグラウンドカラー:
      .bg-primary .bg-success .bg-info .bg-warning
      .bg-danger .bg-inverse .bg-faded
  ◆margin、padding
    marginはmt-3、paddingはpt-3のように使用する。
    {property}{sides}-{breakpoint}-{size}
    2文字目が方向を意味する。
      t - top
      b - bottom
      l - left
      r - right
      x - both left and right
      y - both top and bottom
    数字は大きさを表す。
      0 - 0
      1 - $spacer-x * .25 or $spacer-y * .25
      2 - $spacer-x * .5 or $spacer-y * .5
      3 - $spacer-x or $spacer-y
      4 - $spacer-x * 1.5 or $spacer-y * 1.5
      5 - $spacer-x * 3 or $spacer-y * 3
      なお
      $spacer:   1rem !default; ← デフォルトだと16px
      $spacer-x: $spacer !default;
      $spacer-y: $spacer !default;
  ◆上下左右の位置関係
    .mx-auto 水平方向で中央に位置させる
    .align-items-start 上寄せ
    .align-items-center 中央寄せ
    .align-items-end 下寄せ
  ◆text系
    .text-justify 均等割り付けにする
    .text-left 左寄せ
    .text-center 中央寄せ
    .text-right 右寄せ
    .font-weight-bold ボールド
    .font-italic イタリック

【コーディング規約】
  メソッド名:キャメル
  クラス名:アッパーキャメル
  テーブル関係（テーブル名、属性名）:スネーク
  cssクラス名:小文字とハイフン(bootstrapに合わせるため)
  viewファイル名:キャメル
【通知】
  notificationテーブルのdataに通知内容を保存。保存内容は
  url,messageは必須
  typeとtype_idは必要な場合は設定。
  必要な場合とは、イイね・ワルいねのように連打可能なもののように、同じ通知が何件も行かせないようにする必要が有ることを指す。
  上記設定をすることで通知を特定できるようにする。

【laradock】
  ◆vagrantの起動とssh
  vagrant up
  vagrant ssh

  ◆各種サーバーの起動
  @vagrant  cd /var/www/laradock
  @vagrant  docker-compose up -d nginx mysql phpmyadmin

  ◆db更新など
  @vagrant  cd /var/www/laradock
  @vagrant  docker exec -it laradock_workspace_1 bash
  @docker   cd /var/www/yyux/laradock/uiux
  @docker   php artisan yyux:refresh --all


  scp -rF ssh.config vagrant@default:/var/www/laradock/uiux .

【5.3→5.4】
composer selfupdate
composer update
php artisan view:clear
php artisan route:clear
【5.4→5.5】
php artisan cache:clear

【envoy】
  タスクランナー
  envoy deployAllで「git pull origin master」「php artisan migrate」「composer update」が実行される。
  タスクを実行したい時はEnvoy.blade.phpに追加する。タスクははそれぞれひとつのタスクを記述して、タスクをまとめて行いたい場合はstoryにtaskをまとめて記載すればOK
  タスク単体で実行も可能 例：envoy git
  他のタスクは随時追懐してほしいです。

  実行は今のところdocker内で実行する。できればローカルまたはubuntu上でやりたいけど難しそう…
  composer updateでenvoyをインストール後は恐らく、envoyコマンドがnot foundとなるので
  export PATH=/var/www/yyux/laradock/uiux/vendor/laravel/envoy:$PATH
  で実行パスを通しておく
